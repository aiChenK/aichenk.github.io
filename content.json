{"pages":[],"posts":[{"title":"tp6动态连接数据库","text":"使用场景tp6连接除database.php配置外的数据库（临时数据库等） 使用方式123456789101112131415//use think\\facade\\Config;$config = Config::get('database');$config['connections']['tmp'] = [ 'type' =&gt; 'mysql', 'hostname' =&gt; 'localhost', 'database' =&gt; 'test', 'username' =&gt; 'root', 'password' =&gt; 'root', 'hostport' =&gt; 3306, 'params' =&gt; [], 'charset' =&gt; 'utf8mb4'];Config::set($config, 'database');Db::connect('tmp')-&gt;query('select * from t limit 1');","link":"/2021/09/tutorial/tp6%E5%8A%A8%E6%80%81%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"title":"PHP性能分析之xdebug+webgrind","text":"Xdebug是一个开放源代码的PHP程序调试器，可以用来跟踪，调试和分析PHP程序的运行状况。这里仅说明用来对php运行状态的使用说明。 xdebug安装 运行php -m查看是否已安装xdebug扩展，已安装则跳过当前步骤 源码地址：https://github.com/xdebug/xdebug 编译完成后编辑php.ini文件，添加如下12345678910111213; 引入xdebug扩展extension=xdebug.so; 配置xdebug[xdebug]; 自动生产分析文件xdebug.profiler_enable=0; 启用触发，url添加参数XDEBUG_PROFILE才会生成分析文件xdebug.profiler_enable_trigger=1; 分析文件储存路径(默认/tmp); xdebug.profiler_output_dir = &quot;/tmp/xdebug&quot;; 分析文件名称; xdebug.profiler_output_name=cachegrind.out.%p 重启php-fpm或apache以生效 webgrind安装 webgrind只需引入即可 源码地址：https://github.com/jokkedk/webgrind/ 配置nginx或放入项目中 使用 请求接口，添加参数XDEBUG_PROFILE，会在指定路径中生成一个文件 打开webgrind 选好参数后点击update如下图 参数说明 show 90%：要显示耗时比率，最好不要选100%，会卡。相当于显示出比较耗时的方法 Invocation Count：被调用执行的次数 Total Self Cost：自身耗时 Total Inclusive Cost：综合耗时 比例条：蓝色(内置函数)，灰色(引入文件)，青色(自定义函数)，橙色(过程执行所占时间的比例)","link":"/2019/03/tutorial/PHP%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B9%8Bxdebug+webgrind/"},{"title":"mac pecl安装swoole失败：fatal error: 'openssl/ssl.h' file not found","text":"mac下使用brew安装arm版php7.2，pecl命令安装swoole命令：pecl install swoole发生如下报错 1234567891011121314/private/tmp/pear/temp/swoole/ext-src/php_swoole_private.h:84:2: error: &quot;Enable openssl support, require openssl library&quot;#error &quot;Enable openssl support, require openssl library&quot; ^In file included from /private/tmp/pear/temp/swoole/ext-src/php_swoole.cc:16:In file included from /private/tmp/pear/temp/swoole/ext-src/php_swoole_cxx.h:20:In file included from /private/tmp/pear/temp/swoole/ext-src/php_swoole_coroutine.h:22:In file included from /private/tmp/pear/temp/swoole/include/swoole_coroutine.h:22:In file included from /private/tmp/pear/temp/swoole/include/swoole_socket.h:33:/private/tmp/pear/temp/swoole/include/swoole_ssl.h:27:10: fatal error: 'openssl/ssl.h' file not found#include &lt;openssl/ssl.h&gt; ^~~~~~~~~~~~~~~2 errors generated.make: *** [ext-src/php_swoole.lo] Error 1ERROR: `make' failed openssl本机已安装，所以只需要提示是否启用openssl指定路径即可（以下路径为brew安装openssl路径） 123456➜ ~ pecl install swoole...enable sockets supports? [no] : yesenable openssl support? [no] : yes --with-openssl-dir=/opt/homebrew/opt/openssl...","link":"/2021/09/solve/mac%20pecl%E5%AE%89%E8%A3%85swoole%E5%A4%B1%E8%B4%A5/"},{"title":"php getenv无法获取环境变量","text":"现象php在nginx+fpm模式下getenv()方法获取到的内容与cli模式下不同 举例 shell下输出HOSTNAME 12➜ ~ echo $HOSTNAMEphp-nginx nginx+fpm无法获取HOSTNAME环境变量 123➜ ~ cat test.php&lt;?phpvar_dump(getenv(&quot;HOSTNAME&quot;)); php cli模式下输出 12➜ ~ php -r 'echo getenv(&quot;HOSTNAME&quot;), PHP_EOL;'php-nginx 原因nginx+fpm下环境变量通过nginx的fastcgi传递，所有环境变量需要在nginx配置文件下的fastcgi_params文件指定 解决增加fastcgi_params参数，并重启nginx 123echo &quot;fastcgi_param HOSTNAME php-nginx;&quot; &gt;&gt; /etc/nginx/fastcgi_paramsnginx -s reload","link":"/2021/12/solve/php-getenv%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"},{"title":"处理php使用ZipArchive解压时中文乱码问题","text":"使用php自带的ZipArchive来解压带中文文件名压缩包时会造成乱码，现象如下： 原结构： 解压代码：1234567$zip = new \\ZipArchive();$res = $zip-&gt;open('./钱学森班.zip');if ($res !== true){ throw new \\Exception('打开压缩包失败');}$zip-&gt;extractTo('./cache');$zip-&gt;close(); 解压后 原因默认windows，mac打压缩包时编码为简体中文，解压时未作文件转化导致解压结果与预期不符 解决方法打开压缩包后先将内部文件名及目录进行转码，转码后需关闭压缩包并重新打开解压 实现如下： 12345678910111213141516171819$zipName = './钱学森班.zip';$zip = new \\ZipArchive();$res = $zip-&gt;open($zipName);if ($res !== true){ throw new \\Exception('打开压缩包失败');}// 加入此段↓$fileNum = $zip-&gt;numFiles;for ($i = 0; $i &lt; $fileNum; $i++) { $statInfo = $zip-&gt;statIndex($i, ZipArchive::FL_ENC_RAW); $zip-&gt;renameIndex($i, iconv('GBK', 'utf-8//IGNORE', $statInfo['name']));}$zip-&gt;close();$zip-&gt;open($zipName);// 截至↑$zip-&gt;extractTo($extractTo);$zip-&gt;close(); 注意事项 转码后因为修改了原压缩包文件，所以不可重复转码，若不想对原文件产生影响需先复制（php-zip扩展是自己读文件流，不需要复制） 转换前使用mb_detect_encoding进行编码判断依然是返回UTF-8","link":"/2020/11/solve/php%E4%BD%BF%E7%94%A8ZipArchive%E8%A7%A3%E5%8E%8B%E6%97%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"},{"title":"rabbitmq-channel断网后没有断开情况记录","text":"现象队列中一直有unacked数据 复现监听队列，使用不自动应答模式，拿到消息不应答，断开网络，关闭进程rabbitmq中channel一直存在，state为idle状态只能强制手动关闭连接 疑问 rabbitmq对于tcp连接断开的心跳时间？ 默认30分钟，根据rabbitmq.conf中consumer_timeout确定 如何处理网络异常断开的unacked消息？ 等待连接超时，或强制断开channel 解答来源：Consumers — RabbitMQ If a consumer does not ack its delivery for more than the timeout value (30 minutes by default), its channel will be closed with a PRECONDITION_FAILED channel exception. The error will be logged by the node that the consumer was connected to.The timeout value is configurable in [rabbitmq.conf] (in milliseconds): 12# 30 minutes in millisecondsconsumer_timeout = 1800000","link":"/2021/09/solve/rabbitmq-channel%E6%96%AD%E7%BD%91%E5%90%8E%E6%B2%A1%E6%9C%89%E6%96%AD%E5%BC%80%E6%83%85%E5%86%B5%E8%AE%B0%E5%BD%95/"},{"title":"tp5.0升级tp6.0遇到的问题处理（部分）","text":"概述 tp5.0 -&gt; tp5.1 -&gt; tp6.0 都有较大改动，虽然有官方的升级指导文件但是也没有覆盖所有情况 本次升级的过程也是作为一次尝试，以下问题仅是本人在升级项目中遇到，未包括所有情况 如果不是必要情况，强烈不推荐升级 遇到的问题 路由参数绑定不再支持按照名称成对解析（url_param_type） 本项可直接查看此链接 model不再支持get()/all()方法 可以使用find()/select()来作为替换 若遇到get()参数使用的不是主键，则需配合where()-&gt;find()使用 系统库think\\Db | think\\Session等需要使用门面 如think\\facade\\Session等，具体可查看此处 model中init()方法的模型事件self::beforeInsert(function ($obj) { })等无法使用 更改为public static function onBeforeInsert($obj) {} 控制器中$this-&gt;redirect('/path'); return true;无法使用 直接更改为return redirect('/path'); Session需设置为中间件使用 ROOT_PATH | TEMP_PATH | DS等全局变量不可使用 可替换为app()-&gt;getRootPath() | app()-&gt;getRuntimePath()等 上传文件validate方法不可用 控制器中可使用$this-&gt;validate()或validate()-&gt;check($file)","link":"/2021/07/solve/tp5.0%E5%8D%87%E7%BA%A7tp6.0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"},{"title":"处理tp5升级到tp6时，url参数无法按顺序解析(url_param_type)","text":"背景原项目使用tp5多应用模式，未使用强制路由，且url参数是按照顺序解析url_param_type = 1想尝试能不能从tp5升级到tp6，虽然有官方升级文档，但tp6的url参数方式只能按照名称成对解析，无法满足需求，于是看了下源码看看能不能处理 示例tp5原模式 顺序参数模式（config.php文件中设置'url_param_type' =&gt; 1） 文件路径：application/index/controller/TestController.php12345public function test($a = '', $b = ''){ echo '参数a：', $a, '&lt;br/&gt;'; echo '参数b：', $b, '&lt;br/&gt;';} 执行curl http://localhost/index/test/test/111/222 输出12参数a：111参数b：222 tp6尝试 同样代码输出12参数a：222参数b： 推荐方式：curl http://localhost/index/test/test/a/111/b/222 或者其实：curl http://localhost/index/test/test/fff/111/fff/222也行，具体可以打印request()-&gt;param()看看就知道了 分析 从上述结果可以看出只要解决param解析问题即可，tp6不定义路由时都是按照名称成对解析的 找到tp6解析的地方think\\route\\dispatch\\Url-&gt;parseUrl(string $url): array 解决 更改parseUrl方法可以处理，但对框架有影响，所以建议从项目内部替换Url类 可以直接引入我写的包 composer require aichenk/tp6-route-param 在config/route.php中添加参数'url_param_type' =&gt; 1即可（0即为关闭） tp6输出12参数a：111参数b：222","link":"/2021/07/solve/tp5%E5%8D%87%E7%BA%A7%E5%88%B0tp6%E6%97%B6%EF%BC%8Curl%E5%8F%82%E6%95%B0%E6%97%A0%E6%B3%95%E6%8C%89%E9%A1%BA%E5%BA%8F%E8%A7%A3%E6%9E%90/"},{"title":"webhook触发jenkins进行sonar检测","text":"目的jenkins仅需创建一个job，git推送后自动进行sonar代码检测并上传到sonarqube jenkins插件 已按社区推荐安装基本插件 Generic Webhook Trigger SonarQube Scanner 准备工作 sonar生成令牌 登录后右上角点击”头像 &gt; 我的账号 &gt; 安全“ 生成令牌并复制保存 将令牌添加到jenkins凭证中 “系统管理 &gt; 管理凭证 &gt; 添加凭证” 类型选择Secret text 令牌粘贴到Secret框中，ID及描述可自行设置成想要的 jenkins添加SonarQube Server “系统管理 &gt; 系统配置 &gt; SonarQube servers” 定义name及sonarqube地址，选中刚创建的凭证，点击保存（这里name我命名‘SonarQube’） jenkins添加Sonar Scanner “系统管理 &gt; 全局工具配置 &gt; SonarQube Scanner” 定义name，勾选自动安装，版本选最新即可，点击保存 创建jenkins job 新建job，选择流水线 “构建触发器”选中”Generic Webhook Trigger” 复制http://JENKINS_URL/generic-webhook-trigger/invoke备用，作为触发地址（JENKINS_URL需替换成自己的jenkins地址） Post content parameters提取需要用的参数 github如下 variable expression expressionType defaultValue regexpFilter project_name $.repository.name JSONPath ssh_url $.repository.ssh_url JSONPath ref $.ref JSONPath gitlab如下 variable expression expressionType defaultValue regexpFilter project_name $.project.name JSONPath ssh_url $.project.git_ssh_url JSONPath ref $.ref JSONPath 定义Token，不同token可触发不同job（若token相同则触发多个job） 定义流水线 123456789101112131415161718192021222324252627282930313233pipeline { agent any stages { stage('Check Out!') { steps { script { //解析分支 arr = &quot;${env.ref}&quot;.split(&quot;refs/heads/&quot;) as List currentBranch = arr[1] } git branch: currentBranch, credentialsId: '343aa12a-92a3-4797-a9ea-a8facb4db380', url: '${ssh_url}' //credentialsId为ssh私钥，用于拉git代码 } } stage('Sonar Scan!') { steps { script { sonarqubeScannerHome = tool name: 'SonarQube Scanner' //准备工作第4步的name withSonarQubeEnv('SonarQube') { //准备工作第3步的name，只有一个时可省略 sh &quot;&quot;&quot; ${sonarqubeScannerHome}/bin/sonar-scanner \\ -Dsonar.projectKey=${project_name} \\ -Dsonar.projectName=${project_name} \\ -Dsonar.sources=./ &quot;&quot;&quot; } } } } }} 定义webhook（github为例） 打开项目”Settings &gt; Webhooks” 写入url及创建job第二步的token（注意token在url后） 验证 触发push事件后，可看到jenkins开始构建，完成后sonarqube平台也可看到相关报告","link":"/2022/02/devops/webhook%E8%A7%A6%E5%8F%91jenkins%E8%BF%9B%E8%A1%8Csonar%E6%A3%80%E6%B5%8B/"},{"title":"搭建私有Composer仓库","text":"适用于公司内部进行包管理，在组件化、服务化场景下部分业务代码不方便放到开源平台，可使用内部git服务器，配合composer/satis项目搭建私有composer处理内部依赖，优化代码结构，统一依赖 环境 系统：windows 10 php版本：7.2.17（当前satis要求^7.2.9) git服务：gitlab 示例项目: aichenk/open-crypt 步骤 提交项目源码到gitlab 需配置composer.json，步骤本次不作说明 需可以通过http方式访问（gitlab本身支持） 使用composer建立satis项目并加载依赖 123$ composer create-project composer/satis satis --stability=dev --keep-vcs$ cd satis$ composer install 增加配置文件satis.json（本次建立在项目根目录，可以自由配置） 12345678910111213{ &quot;name&quot;: &quot;satis&quot;, &quot;homepage&quot;: &quot;http://localhost:8080/&quot;, &quot;repositories&quot;: [ { &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http://localhost/aichenk/open-crypt.git&quot; } ], &quot;config&quot;: { &quot;secure-http&quot;: false }} homepage表示satis访问地址（web服务器配置，后续用到） repositories中写入git仓库地址 secure-http:false表示支持http访问 生成仓库列表及网页文件 1$ php bin/satis build satis.json ./web 配置web访问（本示例使用php自带web服务演示） 1$ php -S 0.0.0.0:8080 -t ./web 打开配置的homepage验证是否成功 使用 修改项目composer.json文件 1234567891011121314{ &quot;repositories&quot;: { &quot;packagist&quot;: { &quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;http://localhost:8080/&quot; } }, &quot;config&quot;: { &quot;secure-http&quot;: false }, &quot;require&quot;: { &quot;aichenk/open-crypt&quot;: &quot;^1.0&quot; }} 执行composer install即可 其他说明 项目中添加多个composer源 123456789101112{ &quot;repositories&quot;: [ { &quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;http://localhost:8080&quot; }, { &quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot; } ]} 不使用satis直接使用gitlab加载包 123456789101112{ &quot;repositories&quot;: [ { &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http://localhost/aichenk/open-crypt.git&quot; }, { &quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot; } ]}","link":"/2019/12/devops/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Composer%E4%BB%93%E5%BA%93/"}],"tags":[{"name":"php","slug":"php","link":"/tags/php/"},{"name":"thinkphp","slug":"thinkphp","link":"/tags/thinkphp/"},{"name":"mac","slug":"mac","link":"/tags/mac/"},{"name":"sonar","slug":"sonar","link":"/tags/sonar/"},{"name":"jenkins","slug":"jenkins","link":"/tags/jenkins/"},{"name":"composer","slug":"composer","link":"/tags/composer/"}],"categories":[{"name":"tutorial","slug":"tutorial","link":"/categories/tutorial/"},{"name":"solve","slug":"solve","link":"/categories/solve/"},{"name":"devops","slug":"devops","link":"/categories/devops/"}]}